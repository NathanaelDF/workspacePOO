package Controle;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import Vizualizacao.EntradaSaida;
import Modelo.*;

public class Controladora {

	private Casa casa = null;

	public void exibeMenu() {
		int opcao;
		int qtdePortas = 0;
		int qtdeJanelas = 0;
		boolean verifi = true;
		do {
			opcao = EntradaSaida.solicitaOpcao();
			switch (opcao) {
			case 0:
				this.casa = new Casa();

				String descricao = EntradaSaida.solicitaDescricao("casa", 0);// solicita a descrição casa
				String cor = EntradaSaida.solicitaCor();// solicita a cor casa.
				do {
					verifi = true;
					qtdePortas = EntradaSaida.solicitaQtdeAberturas("portas");// qtade de portas
					qtdeJanelas = EntradaSaida.solicitaQtdeAberturas("janelas");// qtade de janelas
					if(qtdePortas < 0 || qtdeJanelas < 0) {
						verifi = false;
						JOptionPane.showMessageDialog(null,"Você inseriu um número negativo, digite um número de portas ou janelsa possivels");
					}
				} while (!verifi);
				ArrayList<Aberturas> listaDePortas = new ArrayList<Aberturas>();// inicia uma ArrayList lsitaDePortas

				for (int i = 0; i < qtdePortas; i++) {// contadora, que gira o número de portas dado anteriormente
					Porta porta = new Porta();// dentro da varivael porta, se inicia a classe (Porta)
					porta.setDescricao(EntradaSaida.solicitaDescricao("porta", (i + 1)));// aqui colocamos dentro da
																							// variavel portam, sua
																							// descriçao, o "porta" é
																							// parametro para a string
																							// usada na classe
																							// solocitaDescricao
					porta.setEstado(EntradaSaida.solicitaEstado("porta"));// colocamos dentro da variavel porta seu
																			// estado.
					listaDePortas.add(porta);// adicionamos esta porta dentro da ArrayList
				}

				ArrayList<Aberturas> listaDeJanelas = new ArrayList<Aberturas>();

				for (int i = 0; i < qtdeJanelas; i++) {
					Janela janela = new Janela();
					janela.setDescricao(EntradaSaida.solicitaDescricao("janela", (i + 1)));
					janela.setEstado(EntradaSaida.solicitaEstado("janela"));
					listaDeJanelas.add(janela);
				}
				this.casa.constroiCasa(descricao, cor, listaDePortas, listaDeJanelas);
				System.out.println("Descricao de casa: " + casa.getDescricao() + "\n");
				System.out.println("Cor da casa: " + casa.getCor() + "\n");

				for (Aberturas porta : casa.getListaDePortas()) {
					System.out.println("Descricao da porta: " + porta.getDescricao() + "\n");
					System.out.println("Estado da porta: " + porta.getEstado() + "\n");
				}

				for (Aberturas janela : casa.getListaDeJanelas()) {
					System.out.println("Descrição da Janela: " + janela.getDescricao() + "\n");
					System.out.println("Estado da Janela: " + janela.getEstado() + "\n");
				}

				break;
			case 1:

				String tipoAbertura = EntradaSaida.solicitaTipoAbertura();

				ArrayList<Aberturas> listaDeAberturas = new ArrayList<Aberturas>();

				if (tipoAbertura.equals("porta")) {
					listaDeAberturas = this.casa.getListaDePortas();
				} else {
					listaDeAberturas = this.casa.getListaDeJanelas();
				}

				int posicao = EntradaSaida.solicitaAberturaMover(listaDeAberturas);
				int novoEstado = 0;

				if (posicao != -1) {
					novoEstado = EntradaSaida.solicitaEstado(tipoAbertura);
					Aberturas abertura = this.casa.retornaAbertura(posicao, tipoAbertura);
					this.casa.moverAbertura(abertura, novoEstado);
				} else {
					EntradaSaida.exibeMsgAbertura();
				}

				break;
			case 2:
				if (this.casa == null) {
					JOptionPane.showMessageDialog(null, "Começe a construir a casa antes de tudo índo");
				} else {
					String informacoes = this.casa.geraInfoCasa();
					EntradaSaida.exibeInfoCasa(informacoes);
				}
				break;
			}
		} while (opcao != 3);

		EntradaSaida.exibeMsgEncerraPrograma();

		System.exit(0);
	}

}
